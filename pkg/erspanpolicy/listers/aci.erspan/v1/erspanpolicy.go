/***
Copyright 2019 Cisco Systems Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/noironetworks/aci-containers/pkg/erspanpolicy/apis/aci.erspan/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ErspanPolicyLister helps list ErspanPolicies.
type ErspanPolicyLister interface {
	// List lists all ErspanPolicies in the indexer.
	List(selector labels.Selector) (ret []*v1.ErspanPolicy, err error)
	// Get retrieves the ErspanPolicy from the index for a given name.
	Get(name string) (*v1.ErspanPolicy, error)
	ErspanPolicyListerExpansion
}

// erspanPolicyLister implements the ErspanPolicyLister interface.
type erspanPolicyLister struct {
	indexer cache.Indexer
}

// NewErspanPolicyLister returns a new ErspanPolicyLister.
func NewErspanPolicyLister(indexer cache.Indexer) ErspanPolicyLister {
	return &erspanPolicyLister{indexer: indexer}
}

// List lists all ErspanPolicies in the indexer.
func (s *erspanPolicyLister) List(selector labels.Selector) (ret []*v1.ErspanPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ErspanPolicy))
	})
	return ret, err
}

// Get retrieves the ErspanPolicy from the index for a given name.
func (s *erspanPolicyLister) Get(name string) (*v1.ErspanPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("erspanpolicy"), name)
	}
	return obj.(*v1.ErspanPolicy), nil
}
